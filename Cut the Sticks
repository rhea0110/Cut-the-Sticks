// Given an array, lengths, of N stick lengths (where each length is a positive integer), a cut operation reduces the length of each stick in the array by the length of the array's shortest stick. A stick can only be cut if it has a length â‰¥ 1.

Complete the cutSticks() function. Your function must perform cut operations on lengths until every stick length is reduced to 0 and return an integer array, where ith element of the array denotes the individual sticks cut during the ith operation.

Your function must return an integer array or list, where ith element of the array denotes the individual sticks cut during the ith operation.

#include <bits/stdc++.h>
using namespace std;

vector<int> cutSticks(vector<int> lengths) {
sort(lengths.begin(),lengths.end());
  vector<int>ans;
  int d=0;
  for(int i=0;i<lengths.size();i++)
     {
       d=0;
       if(lengths[i]!=0)
       {
       for(int j=i+1;j<lengths.size();j++)
       {
         if(lengths[j]>=lengths[i])
         {
          d++;
           lengths[j]=lengths[j]-lengths[i];
         }
       }
       d++;
       lengths[i]-=lengths[i];
        if(d!=0)
        {
          ans.push_back(d);
        }
       }   
     }
  return ans;
}

int main()
{
  int n = 0, i;
  cin >> n;

  vector<int> lengths(n);
  for(i = 0; i < n; i++) 
    cin>>lengths[i];

  vector<int> res;
  res = cutSticks(lengths);
  for (i = 0; i < res.size(); i++) 
    cout<<res[i]<<endl;

  return 0;
}
